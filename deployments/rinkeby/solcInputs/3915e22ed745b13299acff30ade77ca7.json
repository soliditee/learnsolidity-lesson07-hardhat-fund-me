{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "// Receive funds from any user\r\n// Withdraw funds (contract owner only)\r\n// Set a minimum funding value\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.8;\r\n\r\nimport \"./PriceConverter.sol\";\r\n\r\nerror NotOwner();\r\n\r\ncontract FundMe {\r\n    // immutable = variable can only be assigned during construction time,\r\n    //   and only assigned once even during construction\r\n    //   the contract creation code generated by the compiler will modify\r\n    //   the contract's runtime code before it is returned\r\n    //   by replacing all references to immutables by the values assigned to the them.\r\n    // Reference: https://ethereum.stackexchange.com/questions/82240/what-is-the-immutable-keyword-in-solidity\r\n    address public immutable i_owner;\r\n    // 23619 gas - non-immutable\r\n    // 21508 gas - immutable\r\n\r\n    using PriceConverter for uint256;\r\n\r\n    // 21415 gas - constant\r\n    // 23515 gas - non-constant\r\n    uint256 public MINIMUM_USD = 10 * 1e18;\r\n\r\n    address[] public funders;\r\n    mapping(address => uint256) public addressToAmountFunded;\r\n\r\n    AggregatorV3Interface public priceFeed;\r\n\r\n    constructor(address priceFeedAddress) {\r\n        i_owner = msg.sender;\r\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\r\n    }\r\n\r\n    // payable = this function can send and receive funds\r\n    function fund() public payable {\r\n        // If this \"require\" condition is not satisfied, the transaction is reverted\r\n        // \"Revert\" means to undo any action before and send the remaining gas back\r\n        // 1e18 = 1 * 10^18 Wei = 1 Ether\r\n        // require(getConversionRate(msg.value) >= MINIMUM_USD, \"Not enough Ether\");\r\n        require(\r\n            msg.value.getConversionRate(priceFeed) > MINIMUM_USD,\r\n            \"Please send more than 50 USD worth of Ether\"\r\n        );\r\n        funders.push(msg.sender);\r\n        addressToAmountFunded[msg.sender] += msg.value;\r\n    }\r\n\r\n    function withdraw() public onlyOwner {\r\n        // Reset the mapping that tracks funders and their amount\r\n        for (\r\n            uint256 funderIndex = 0;\r\n            funderIndex < funders.length;\r\n            funderIndex++\r\n        ) {\r\n            address funderAddress = funders[funderIndex];\r\n            addressToAmountFunded[funderAddress] = 0;\r\n        }\r\n\r\n        // Reset an array\r\n        // (0) means the new array will have 0 elements to begin with\r\n        funders = new address[](0);\r\n\r\n        // 3 ways to withdraw the fund:\r\n        // 1) Transfer\r\n        // Ether can only be sent to payable addresses\r\n        // Transfer will return error and auto-revert if fail\r\n        // payable(msg.sender).transfer(address(this).balance);\r\n\r\n        // 2) Send\r\n        // Send will return bool and will not auto-revert\r\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\r\n        // require(sendSuccess, \"Send failed\");\r\n\r\n        // 3) Call\r\n        // This is the most powerful, we can call any function without knowing the ABI.\r\n        // We use \"call\" to create a new transaction to the sender's address and send the \"value\"\r\n        // instead of making an actual function call\r\n        // (bool callSuccess, bytes memory dataReturned)\r\n        (bool callSuccess, ) = payable(msg.sender).call{\r\n            value: address(this).balance\r\n        }(\"\");\r\n        require(callSuccess, \"Call failed\");\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        // 21509 gas - require\r\n        // 21255 gas - if + revert error\r\n        // require(msg.sender == i_owner, \"You are not the owner.\");\r\n        if (msg.sender != i_owner) {\r\n            revert NotOwner();\r\n        }\r\n        // This means execute the rest of the code\r\n        _;\r\n    }\r\n\r\n    // Fallback to receive() when msg.data is empty in a transaction\r\n    receive() external payable {\r\n        fund();\r\n    }\r\n\r\n    // Fallback to fallback() when msg.data is not empty but cannot be mapped to an actual function\r\n    fallback() external payable {\r\n        fund();\r\n    }\r\n}\r\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.8;\r\n\r\n// @chainlink/contracts is an npm package\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\n// Reference: https://docs.chain.link/docs/ethereum-addresses/\r\n// Kovan Data Feed ETA - USD Address: 0x9326BFA02ADD2366b30bacB125260Af641031331\r\n\r\nlibrary PriceConverter {\r\n    // Return the USD price of one ETH, in the same number of decimals as msg.value (decimals = 18)\r\n    function getPrice(AggregatorV3Interface priceFeed)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        (, int256 price, , , ) = priceFeed.latestRoundData();\r\n        // price decimals = 8\r\n        // Reference: https://etherscan.io/address/0x5f4ec3df9cbd43714fe2740f5e3616155c5b8419#readContract\r\n        // we need to add 10 more decimals here\r\n        return uint256(price * 1e10);\r\n    }\r\n\r\n    function getConversionRate(\r\n        uint256 ethAmount,\r\n        AggregatorV3Interface priceFeed\r\n    ) internal view returns (uint256) {\r\n        uint256 ethPrice = getPrice(priceFeed);\r\n        uint256 ethAmountInUSD = (ethAmount * ethPrice) / 1e18;\r\n        return ethAmountInUSD;\r\n    }\r\n}\r\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}